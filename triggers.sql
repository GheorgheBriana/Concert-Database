-- This trigger is an LMD (Language Manipulation Data) trigger at the statement level.
-- It is automatically activated after each insert operation in the BILET table.
-- Its purpose is to record an informational message in the MESAJE table whenever a new ticket is added.

CREATE OR REPLACE TRIGGER TRG_LOG_BILET
AFTER INSERT ON BILET
BEGIN
    -- Insert an entry into the MESAJE table to document the action.
    INSERT INTO MESAJE (cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
    VALUES (
        -- Unique code for the message, generated by a sequence
        seq_cod_mesaj.NEXTVAL,
        'A ticket has been added to the BILET table.', -- Descriptive action message
        'I', -- Message type: Informational
        USER, -- User who performed the insert operation
        SYSDATE -- Date and time when the insert occurred
    );
END;
/

-- To test the trigger, insert a ticket into the BILET table.
INSERT INTO BILET (ID_CONCERT, ID_UTILIZATOR, ID_TIP_BILET) VALUES (5, 8, 1);


--------------------------------------------------------------
-- This trigger is an LMD trigger at the row level.
-- It is activated after each insertion of a row in the BILET table.
-- The trigger updates the available seats for a concert when a user purchases a ticket.
-- It checks whether seats are available for the selected concert, decreasing the count if possible.
-- If no seats are available, the operation is blocked, and an error message is generated.
-- Each successful change is logged in the MESAJE table.

CREATE OR REPLACE TRIGGER TRG_UPDATE_LOCURI_DISPONIBILE
BEFORE INSERT ON BILET 
FOR EACH ROW 
DECLARE
    available_seats INTEGER; -- Variable to store the current number of available seats
    -- Allows the trigger to insert the error message into the MESAJE table even if the transaction is rolled back
    PRAGMA AUTONOMOUS_TRANSACTION; 

BEGIN
    -- Retrieve the number of available seats for the specified concert
    SELECT LOCURI_DISPONIBILE
    INTO available_seats
    FROM CONCERT
    WHERE ID_CONCERT = :NEW.ID_CONCERT;

    -- Check if seats are available
    IF available_seats > 0 THEN
        -- Update available seats by decreasing the count
        UPDATE CONCERT
        SET LOCURI_DISPONIBILE = LOCURI_DISPONIBILE - 1
        WHERE ID_CONCERT = :NEW.ID_CONCERT;

        -- Insert an informational message into the MESAJE table
        INSERT INTO MESAJE (cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        VALUES (
            seq_cod_mesaj.NEXTVAL,
            'A ticket has been purchased. Available seats reduced for concert ID ' || :NEW.ID_CONCERT,
            'I', -- Message type: Informational
            USER, -- User who performed the action
            SYSDATE -- Date and time of the action
        );
        
        -- Insert a warning message if available seats drop below 5
        IF available_seats - 1 < 5 THEN
            INSERT INTO MESAJE (cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
            VALUES (
                seq_cod_mesaj.NEXTVAL,
                'Warning: Less than 10 seats available for concert ID ' || :NEW.ID_CONCERT,
                'W', -- Message type: Warning
                USER,
                SYSDATE
            );
        END IF;
        
    ELSE
        -- Insert an error message into the MESAJE table
        INSERT INTO MESAJE (cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        VALUES (
            seq_cod_mesaj.NEXTVAL,
            'Error: No available seats for concert ID ' || :NEW.ID_CONCERT,
            'E', -- Message type: Error
            USER,
            SYSDATE
        );
        
        COMMIT; -- Apply changes from the trigger before raising the error
        
        -- Raise an error if no seats are available
        RAISE_APPLICATION_ERROR(-20002, 'No available seats for this concert.');
    END IF;
END;
/

-- To test this trigger, add a new concert with a limited number of seats
-- and attempt to insert tickets beyond this limit to trigger the error.

-- Insert a Sleep Token concert at Arenele Romane, May 2025, with 5 available seats
INSERT INTO CONCERT (ID_LOCATIE, NUME_CONCERT, DATA_ORA_CONCERT, CAPACITATE_CONCERT, LOCURI_DISPONIBILE) 
VALUES (3, 'Sleep Token - Arenele Romane', TO_DATE('2025-05-10 19:30', 'YYYY-MM-DD HH24:MI'), 5, 5);

-- Associate Sleep Token (ID_ARTIST = 6) with the new concert in the GAZDUIESTE table
INSERT INTO GAZDUIESTE (ID_CONCERT, ID_ARTIST) 
VALUES ((SELECT ID_CONCERT FROM CONCERT WHERE NUME_CONCERT = 'Sleep Token - Arenele Romane'), 6);

-- Insert tickets
INSERT INTO BILET (ID_CONCERT, ID_UTILIZATOR, ID_TIP_BILET) VALUES (8, 1, 1); -- VIP for Briana
INSERT INTO BILET (ID_CONCERT, ID_UTILIZATOR, ID_TIP_BILET) VALUES (8, 2, 2); -- Premium for Adrian
INSERT INTO BILET (ID_CONCERT, ID_UTILIZATOR, ID_TIP_BILET) VALUES (8, 3, 3); -- Standard for Ana
INSERT INTO BILET (ID_CONCERT, ID_UTILIZATOR, ID_TIP_BILET) VALUES (8, 6, 3); -- Standard for Alex
INSERT INTO BILET (ID_CONCERT, ID_UTILIZATOR, ID_TIP_BILET) VALUES (8, 5, 5); -- Student ticket for Mihai -- error


--------------------------------------------------------------
-- This trigger is a DDL trigger at the schema level.
-- It is activated after each DROP or ALTER operation on any object in the current schema.
-- The trigger checks if the change affects the LOCATIE table.
-- If the LOCATIE table is the target, the type of operation (DROP or ALTER) is identified using ORA_SYSEVENT.
-- A descriptive message is then logged in the MESAJE table, indicating the operation performed and the user who initiated the change.
-- This trigger allows monitoring and auditing of critical changes to the LOCATIE table.

CREATE OR REPLACE TRIGGER TRG_LOCATION_DDL
AFTER DROP OR ALTER ON SCHEMA
DECLARE
    v_action VARCHAR2(50);
    v_table_name VARCHAR2(50);
BEGIN
    -- Retrieve the name of the affected object
    v_table_name := ORA_DICT_OBJ_NAME;

    -- Retrieve the triggering action (DROP, ALTER, etc.)
    v_action := ORA_SYSEVENT;

    -- Check if the modification is on the LOCATIE table
    IF v_table_name = 'LOCATIE' THEN
        -- Log the change in the MESAJE table
        INSERT INTO MESAJE (cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        VALUES (
            seq_cod_mesaj.NEXTVAL,
            'Operation ' || v_action || ' performed on table LOCATIE.',
            'W', -- Warning
            USER,
            SYSDATE
        );
    END IF;
END;
/

-- To verify the trigger, add and delete a column from the LOCATIE table.
ALTER TABLE LOCATIE ADD COL_TEST NUMBER(5);
ALTER TABLE LOCATIE DROP COLUMN COL_TEST;

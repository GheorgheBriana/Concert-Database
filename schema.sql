-- Creation and population of tables

-- Creating the LOCATIE table
CREATE TABLE LOCATIE(
    ID_LOCATIE INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NUME_LOCATIE VARCHAR2(100) NOT NULL,
    ADRESA_LOCATIE VARCHAR2(200) NOT NULL
);
DESCRIBE LOCATIE;

-- Creating the CONCERT table
CREATE TABLE CONCERT(
    ID_CONCERT INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_LOCATIE INTEGER NOT NULL,
    NUME_CONCERT VARCHAR2(200) NOT NULL,
    DATA_ORA_CONCERT TIMESTAMP NOT NULL,
    CAPACITATE_CONCERT INTEGER NOT NULL,
    LOCURI_DISPONIBILE INTEGER NOT NULL,
    CONSTRAINT fk_concert_locatie FOREIGN KEY (ID_LOCATIE) REFERENCES LOCATIE(ID_LOCATIE),
    CONSTRAINT chk_locuri_disponibile CHECK (LOCURI_DISPONIBILE >= 0)
);
DESCRIBE CONCERT;

-- Creating the ARTIST table
CREATE TABLE ARTIST(
    ID_ARTIST INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NUME_ARTIST VARCHAR2(100) NOT NULL
);
DESCRIBE ARTIST;

-- Creating the GEN table
CREATE TABLE GEN(
    ID_GEN INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NUME_GEN VARCHAR2(50) NOT NULL
);
DESCRIBE GEN;

-- Creating the UTILIZATOR table
CREATE TABLE UTILIZATOR(
    ID_UTILIZATOR INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PRENUME VARCHAR2(100) NOT NULL,
    NUME_FAMILIE VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL
);
DESCRIBE UTILIZATOR;

-- Creating the UTILIZATOR_ARTIST_FAVORIT table
CREATE TABLE UTILIZATOR_ARTIST_FAVORIT(
    ID_UTILIZATOR INTEGER NOT NULL,
    ID_ARTIST INTEGER NOT NULL,
    CONSTRAINT pk_utilizator_artist_favorit PRIMARY KEY (ID_UTILIZATOR, ID_ARTIST),
    CONSTRAINT fk_utilizator FOREIGN KEY (ID_UTILIZATOR) REFERENCES UTILIZATOR(ID_UTILIZATOR),
    CONSTRAINT fk_artist FOREIGN KEY (ID_ARTIST) REFERENCES ARTIST(ID_ARTIST)
);
DESCRIBE UTILIZATOR_ARTIST_FAVORIT;

-- Creating the TIP_BILET table
CREATE TABLE TIP_BILET(
    ID_TIP_BILET INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TIP_BILET VARCHAR2(50) NOT NULL,
    PRET_BILET DECIMAL(10, 2) NOT NULL
);
DESCRIBE TIP_BILET;

-- Creating the BILET table
CREATE TABLE BILET(
    ID_BILET INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_CONCERT INTEGER NOT NULL,
    ID_UTILIZATOR INTEGER NOT NULL,
    ID_TIP_BILET INTEGER NOT NULL,
    CONSTRAINT fk_bilet_concert FOREIGN KEY (ID_CONCERT) REFERENCES CONCERT(ID_CONCERT),
    CONSTRAINT fk_bilet_utilizator FOREIGN KEY (ID_UTILIZATOR) REFERENCES UTILIZATOR(ID_UTILIZATOR),
    CONSTRAINT fk_bilet_tip_bilet FOREIGN KEY (ID_TIP_BILET) REFERENCES TIP_BILET(ID_TIP_BILET)
);
DESCRIBE BILET;

-- Creating the CANTA table
CREATE TABLE CANTA (
    ID_ARTIST INTEGER NOT NULL,
    ID_GEN INTEGER NOT NULL,
    CONSTRAINT pk_artist_gen PRIMARY KEY (ID_ARTIST, ID_GEN),
    CONSTRAINT fk_canta_artist FOREIGN KEY (ID_ARTIST) REFERENCES ARTIST(ID_ARTIST),
    CONSTRAINT fk_canta_gen FOREIGN KEY (ID_GEN) REFERENCES GEN(ID_GEN)
);
DESCRIBE CANTA;

-- Creating the GAZDUIESTE table
CREATE TABLE GAZDUIESTE(
    ID_CONCERT INTEGER NOT NULL,
    ID_ARTIST INTEGER NOT NULL,
    CONSTRAINT pk_gazduieste PRIMARY KEY (ID_CONCERT, ID_ARTIST),
    CONSTRAINT fk_gazduieste_concert FOREIGN KEY (ID_CONCERT) REFERENCES CONCERT(ID_CONCERT),
    CONSTRAINT fk_gazduieste_artist FOREIGN KEY (ID_ARTIST) REFERENCES ARTIST(ID_ARTIST)
);
DESCRIBE GAZDUIESTE;

-- Trigger to decrease available seats when a ticket is purchased
-- and to prevent decrementing when no seats are available
CREATE OR REPLACE TRIGGER TRG_UPDATE_LOCURI_DISPONIBILE
AFTER INSERT ON BILET
FOR EACH ROW
DECLARE
    locuri_disponibile INTEGER;
BEGIN
    -- Check if seats are available before decreasing
    SELECT LOCURI_DISPONIBILE INTO locuri_disponibile
    FROM CONCERT
    WHERE ID_CONCERT = :NEW.ID_CONCERT;

    IF locuri_disponibile > 0 THEN
        -- Update LOCURI_DISPONIBILE in the CONCERT table
        UPDATE CONCERT
        SET LOCURI_DISPONIBILE = LOCURI_DISPONIBILE - 1
        WHERE ID_CONCERT = :NEW.ID_CONCERT;
    ELSE
        -- Raise an error if no seats are available
        RAISE_APPLICATION_ERROR(-20002, 'No seats available for this concert.');
    END IF;
END;
/

-- Populating the LOCATIE table
INSERT INTO LOCATIE (NUME_LOCATIE, ADRESA_LOCATIE) VALUES ('Arena Națională', 'Bucharest, Bd. Basarabia 37-39');
INSERT INTO LOCATIE (NUME_LOCATIE, ADRESA_LOCATIE) VALUES ('Romexpo', 'Bucharest, Piața Presei Libere 1');
INSERT INTO LOCATIE (NUME_LOCATIE, ADRESA_LOCATIE) VALUES ('Arenele Romane', 'Strada Cutitul de Argint, Bucharest');
INSERT INTO LOCATIE (NUME_LOCATIE, ADRESA_LOCATIE) VALUES ('Electric Castle', 'Banffy Castle, Bonțida, Cluj');
INSERT INTO LOCATIE (NUME_LOCATIE, ADRESA_LOCATIE) VALUES ('Rock im Park', 'Zeppelinfeld, Nuremberg, Germany');
SELECT * FROM LOCATIE;

-- Populating the ARTIST table
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Taylor Swift');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Alternosfera');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Irina Rimes');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('The Weeknd');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Linkin Park');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Sleep Token');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Bad Omens');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Poppy');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Palaye Royale');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('I See Stars');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Huddy');
INSERT INTO ARTIST (NUME_ARTIST) VALUES ('Bring Me The Horizon');
SELECT * FROM ARTIST;
